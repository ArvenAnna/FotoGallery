{"version":3,"sources":["webpack:///./components/picture/GMap.js"],"names":["GMap","connect","store","saveFotoInformation","React","Component","constructor","props","foto","images","index","state","selectedPlace","currentLocation","mapFoto","componentDidMount","position","setState","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","onMarkerClick","src","onMapClicked","g","e","r","console","log","latLng","Object","assign","changeCoordinates","render","splice","google","close","a","b","c","name","url","anchor","maps","Point","scaledSize","Size","filter","image","map","GoogleApiWrapper","apiKey"],"mappings":"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","file":"0.f504311cd751322a8b08.hot-update.js","sourcesContent":["import React from 'react';\nimport {CrossIcon} from \"../Icons\";\nimport './map.less';\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react';\nimport connect from \"react-redux/es/connect/connect\";\nimport {fetchAlbums, saveFotoInformation} from \"../../actions/albumActions\";\n\n@connect(store => ({}), {\n    saveFotoInformation\n})\nclass GMap extends React.Component {\n\n    constructor(props) {\n        super(props);\n        const foto = props.images[props.index];\n        this.state = {\n            selectedPlace: {},\n            currentLocation: {},\n            foto: foto,\n            mapFoto: null\n        }\n    }\n\n    componentDidMount() {\n        const foto = this.props.images[this.props.index];\n        if (foto.position) {\n            this.setState({ currentLocation: foto.position });\n        } else if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((pos) => {\n                const coords = pos.coords;\n                this.setState({\n                    currentLocation: {\n                        lat: coords.latitude,\n                        lng: coords.longitude\n                    }\n                })\n            })\n        }\n    }\n\n    onMarkerClick(foto) {\n        this.setState({mapFoto: foto.src});\n    }\n\n    onMapClicked(g, e, r) {\n        console.log(r.latLng.lat());\n        const foto = Object.assign({}, this.state.foto);\n        foto.position = {lat: r.latLng.lat(), lng: r.latLng.lng()};\n        this.setState({foto});\n        this.props.changeCoordinates(foto);\n        this.props.saveFotoInformation(foto);\n    }\n\n    render() {\n        const {foto} = this.state;\n        let images =[...this.props.images];\n        images.splice(this.props.index, 1);\n\n        if (!this.state.currentLocation || !this.state.currentLocation.lat) return null;\n        if(!this.props.google) return null;\n\n        return <div className=\"map_container\">\n            <CrossIcon className='cross'\n                       onClick={this.props.close}/>\n            <Map\n                google={this.props.google}\n                zoom={14}\n                initialCenter={ this.state.currentLocation }\n                onClick={(a, b, c) => this.onMapClicked(a, b, c)}\n            >\n\n                {foto.position &&\n                <Marker onClick={(foto) => this.onMarkerClick(foto)}\n                        key=\"active\"\n                        title={foto.name}\n                        name={foto.name}\n                        position={foto.position}\n                        icon={{\n                            url: \"../../svg/placeholder_red.svg\",\n                            anchor: new google.maps.Point(16,16),\n                            scaledSize: new google.maps.Size(32,32)\n                        }}\n                />}\n\n                {images && images.filter(image => image.position).map((image, index) => <Marker onClick={(image) => this.onMarkerClick(image)}\n                                                       key={index}\n                                                       title={image.name}\n                                                       name={image.name}\n                                                       position={image.position}\n                                                       icon={{\n                                                            url: \"../../svg/placeholder_green.svg\",\n                                                            anchor: new google.maps.Point(16,16),\n                                                            scaledSize: new google.maps.Size(32,32)\n                                                       }}\n                />)}\n\n            </Map>\n            {this.state.mapFoto && <div className=\"map_foto\">\n                <img src={this.state.mapFoto}/>\n                <CrossIcon onClick={() => this.setState({mapFoto: null})}/>\n            </div>}\n        </div>\n    }\n}\n\nexport default GoogleApiWrapper({\n    apiKey: (\"AIzaSyDWNe8nbXT808Y9VT3ei5JbVBR-jBK-Y0s\")\n})(GMap)\n\n\n// WEBPACK FOOTER //\n// ./components/picture/GMap.js"],"sourceRoot":""}